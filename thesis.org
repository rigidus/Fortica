#+STARTUP: showall indent hidestars
#+TOC: headlines 3

* Не нравится

- Все тормозит (я нажимаю клавишу, и вижу задержку)
- Работает на одной архитектуре, прибитой намертво. При этом у каждого комп на интеле либо мак, телефон на arm, и все напоминает зоопарк
- Куча кода, нелегко разбираться, нелегко улучшать
- Из-за этого контроль у Apple/Microsoft/Canonical
- Не переживает выдергивание вилки из розетки (https://en.wikipedia.org/wiki/Persistence_(computer_science))
- Не способно отправлять вычисления на другие узлы
- Не работает глобально, беготня с флешками по разым машинам, вместо прозрачной синхронизации
- Авторизация - боль, сотни логинов, токенов, парольных менеджеров (все небезопасное) при всего одной identity. А что если их несколько?
- Создает препятствия вместо усиления интеллекта (по Энгельбарту)

* Ортогональная персистентность

Сохранение называется « ортогональным » или «прозрачным», когда оно реализовано как внутреннее свойство среды выполнения программы. Среда ортогонального сохранения не требует никаких специальных действий от программ, работающих в ней, для извлечения или сохранения их состояния .

Неортогональное сохранение требует, чтобы данные записывались в хранилище и считывались из него с использованием определенных инструкций в программе, что приводит к использованию глагола сохранять как переходного: по завершении программа сохраняет данные .

Преимущество сред ортогонального сохранения заключается в более простых и менее подверженных ошибкам программах. [ необходима ссылка ]

Термин «персистентный» впервые был введен Аткинсоном и Моррисоном. [ 1 ] в смысле ортогональной персистентности: они использовали прилагательное, а не глагол, чтобы подчеркнуть персистентность как свойство данных, в отличие от императивного действия, выполняемого программой. Использование переходного глагола «persist» (описывающего действие, выполняемое программой) является обратной формацией.

* Компоненты

Есть мысль о том, что если у нас есть какие-то куски с состоянием и поведением (объекты или их системы, которые иногда называют компонентами), то каждый объект может получить API для сохранения своего (версионированного) состояния и для него будет прозрачно где оно там сохраняется. Все состояние становится всеобщим. На другой машине ты получаешь просто доступ к тому с чем работаешь

* Одноуровневое хранилище

Одноуровневое хранилище ( SLS ) или одноуровневая память — это термин компьютерного хранилища , который имеет два значения. Эти два значения связаны тем, что в обоих случаях страницы памяти могут находиться в первичном хранилище ( RAM ) или во вторичном хранилище (диск), и физическое расположение страницы не имеет значения для процесса.

Первоначально этот термин относился к тому, что сейчас обычно называют виртуальной памятью , которая была введена в 1962 году системой Atlas в Манчестерском университете . [ 1 ]

В современном использовании этот термин обычно относится к организации вычислительной системы, в которой нет файлов , а есть только постоянные объекты (иногда называемые сегментами ), которые отображаются в процессов адресные пространства (которые полностью состоят из набора отображенных объектов). Вся память компьютера рассматривается как одна двумерная плоскость адресов (сегмент и адрес внутри сегмента).

Концепция постоянных объектов была впервые представлена ​​компанией Multics в середине 1960-х годов в совместном проекте Массачусетского технологического института , General Electric и Bell Labs . [ 2 ] Он также был реализован как виртуальная память, а фактическая физическая реализация включала несколько уровней типов хранения. (Например, Multics изначально имели три уровня: основную память, высокоскоростной барабан и диски.)

Проект одноуровневого хранилища IBM изначально был задуман и впервые реализован Фрэнком Солтисом и Гленном Генри в конце 1970-х годов как способ создания переходной реализации для компьютеров со 100% твердотельной памятью .

Ну вот, время пришло


* Безопасность, основанная на возможностях

Каждый компонент может взаимодействовать с другими только через защищенные интерфейсы и изолирован от остальной части системы. Защищенный интерфейс в этом контексте — это тот, который обеспечивается самой нижней частью операционной системы, ядром . Это единственная часть системы, которая может перемещать информацию из одного процесса в другой. Он также имеет полный контроль над машиной и (если правильно построен) не может быть обойден. В EROS предоставляемый ядром механизм, с помощью которого один компонент называет и вызывает службы другого, является возможностью , использующей межпроцессное взаимодействие (IPC). Обеспечивая защищенные возможностями интерфейсы, ядро ​​гарантирует, что все коммуникации с процессом поступают через намеренно экспортированный интерфейс. Оно также гарантирует, что никакой вызов невозможен, если вызывающий компонент не имеет действительной возможности для вызываемого компонента. Защита в системах возможностей достигается путем ограничения распространения возможностей от одного компонента к другому, часто с помощью политики безопасности, называемой заключение .

Системы возможностей естественным образом продвигают компонентную структуру программного обеспечения. Этот организационный подход похож на концепцию языка программирования объектно-ориентированного программирования , но происходит на более высоком уровне детализации и не включает концепцию наследования . Когда программное обеспечение реструктурируется таким образом, возникает несколько преимуществ:

    Отдельные компоненты наиболее естественно структурированы как циклы событий . Примерами систем, которые обычно структурированы таким образом, являются системы управления полетом самолета (см. также DO-178B Software Considerations in Airborne Systems and Equipment Certification ) и телефонные коммутационные системы (см. 5ESS switch ). Программирование, управляемое событиями, выбрано для этих систем в основном из-за простоты и надежности, которые являются существенными атрибутами в жизненно важных и критически важных для миссии системах.
    Компоненты становятся меньше и их можно тестировать по отдельности, что помогает легче изолировать и выявлять недостатки и ошибки.
    Изоляция каждого компонента от других ограничивает масштаб любого ущерба, который может возникнуть в случае возникновения неполадок или некорректной работы программного обеспечения.

В совокупности эти преимущества приводят к заметно более надежным и безопасным системам.

Архитектуры чистых возможностей поддерживаются хорошо проверенными и зрелыми математическими моделями безопасности. Они использовались для формальной демонстрации того, что системы, основанные на возможностях, могут быть сделаны безопасными, если они реализованы правильно. Было показано, что так называемое «свойство безопасности» разрешимо для систем чистых возможностей (см. Lipton ).

Система L4.sec, которая является преемницей семейства микроядер L4 , является системой, основанной на возможностях, и на нее значительное влияние оказали результаты проекта EROS. Влияние взаимное, поскольку работа EROS над высокопроизводительным вызовом была сильно мотивирована Йохена Лидтке успехами с семейством микроядер L4 .

* Нравится

** https://en.wikipedia.org/wiki/EROS_(microkernel)

Чрезвычайно надежная операционная система ( EROS ) — операционная система , разработанная в 1991 году в Университете Пенсильвании , а затем в Университете Джонса Хопкинса и The EROS Group, LLC. Функции включают автоматическое сохранение данных и процессов , некоторую предварительную поддержку в реальном времени и безопасность на основе возможностей . EROS — это чисто исследовательская операционная система, которая никогда не была развернута в реальном мире. По состоянию на 2005 год , разработка была остановлена ​​в пользу системы-преемницы CapROS.
Ключевые понятия

Главной целью системы EROS (и ее родственников) является обеспечение надежной поддержки на уровне операционной системы для эффективной реструктуризации критически важных приложений в небольшие взаимодействующие компоненты.

Plessey System 250 была системой, изначально разработанной для использования в телефонных коммутаторах, чья конструкция на основе возможностей была выбрана специально из соображений надежности.

В отличие от многих более ранних систем, возможности являются единственным механизмом для именования и использования ресурсов в EROS, что делает его тем, что иногда называют чистой системой возможностей. Напротив, IBM i является примером коммерчески успешной системы возможностей, но это не чистая система возможностей.

Ограничение, которое является фундаментальным строительным блоком изоляции, было формально проверено на возможность принудительного применения системами чистых возможностей, [ 1 ] и сводится к практической реализации конструктором EROS и KeyKOS фабрикой . Не существует сопоставимой проверки для любого другого примитивного механизма защиты. В литературе есть фундаментальный результат, показывающий, что безопасность математически неразрешима в общем случае (см. HRU , но следует отметить, что это, конечно, доказуемо для неограниченного набора ограниченных случаев [ 2 ] ). Более важное практическое значение имеет то, что безопасность оказалась ложной для всех примитивных механизмов защиты, поставляемых в современных операционных системах массового потребления. Безопасность является необходимым предварительным условием для успешного применения любой невозможно политики безопасности. С практической точки зрения этот результат означает, что в принципе защитить современные системы массового потребления, но потенциально возможно защитить системы на основе возможностей при условии их достаточной тщательности. Ни EROS, ни KeyKOS никогда не были успешно взломаны, и их механизмы изоляции никогда не были успешно преодолены каким-либо внутренним злоумышленником, но неизвестно, были ли эти две реализации достаточно осторожны. Одной из целей проекта Coyotos было продемонстрировать, что изоляция компонентов и безопасность были окончательно достигнуты путем применения методов проверки программного обеспечения.

История

Главным разработчиком EROS был Джонатан С. Шапиро. Он также был движущей силой Coyotos, который был "эволюционным шагом" [ 3 ] за пределами операционной системы EROS. [ 4 ]

Проект EROS начался в 1991 году как реконструкция более ранней операционной системы KeyKOS в чистой комнате . KeyKOS была разработана Key Logic, Inc. и была прямым продолжением работы над более ранней системой Great New Operating System In the Sky ( GNOSIS ), созданной Tymshare, Inc. Обстоятельства, окружавшие крах Key Logic в 1991 году, сделали лицензирование KeyKOS нецелесообразным. Поскольку KeyKOS в любом случае не работала на популярных процессорах, было принято решение реконструировать ее из общедоступной документации.

К концу 1992 года стало ясно, что архитектура процессора значительно изменилась с момента появления идеи возможностей, и уже не было очевидно, что структурированные по компонентам системы были практичны. Системы на основе микроядра , которые также отдают предпочтение большому количеству процессов и IPC, сталкивались с серьезными проблемами производительности, и было неясно, можно ли их успешно решить. Архитектура x86 явно становилась доминирующей архитектурой, но дорогостоящая задержка перехода пользователь/супервизор на 386 и 486 представляла серьезные проблемы для изоляции на основе процессов. Проект EROS превращался в исследовательскую работу и был перемещен в Университет Пенсильвании высокопроизводительная реализация для процессора Pentium , чтобы стать центром диссертационного исследования Шапиро. К 1999 году была продемонстрирована , которая была напрямую конкурентоспособна по производительности с семейством микроядер L4 , которое известно своей исключительной скоростью в IPC. Механизм ограничения EROS был формально проверен, в процессе создания общей формальной модели для безопасных систем возможностей.

В 2000 году Шапиро присоединился к факультету компьютерных наук в Университете Джонса Хопкинса. В Хопкинсе целью было показать, как использовать возможности, предоставляемые ядром EROS, для создания безопасных и защищаемых серверов на уровне приложений. Финансируемый Агентством перспективных исследовательских проектов Министерства обороны и Исследовательской лабораторией ВВС , EROS использовался в качестве основы для надежной оконной системы, [ 5 ] высокопроизводительный, защищенный сетевой стек, [ 6 ] и начало безопасного веб-браузера. Он также использовался для исследования эффективности легкой статической проверки. [ 7 ] В 2003 году были обнаружены очень серьезные проблемы безопасности. [ 8 ] которые присущи любой архитектуре системы, основанной на синхронных примитивах IPC (в частности, включая EROS и L4). Работа над EROS была остановлена ​​в пользу Coyotos, который решил эти проблемы. [ необходима ссылка ]

По состоянию на 2006 год EROS и ее последователи являются единственными широкодоступными системами возможностей, работающими на общедоступном оборудовании.
Статус

Работа над EROS и Coyotos первоначальной группой была остановлена, но существует система-преемница. [ 4 ] CapROS (Capability Based Reliable Operating System), преемница EROS, представляет собой коммерчески ориентированную операционную систему с открытым исходным кодом. [ 9 ]
Смотрите также

    Наноядро

Ссылки

Шапиро, Джонатан С.; Вебер, Сэмюэл (29 октября 1999 г.). Проверка механизма ограничения EROS (PDF) . Симпозиум IEEE 2000 по безопасности и конфиденциальности. Беркли, Калифорния, США. doi : 10.1109/SECPRI.2000.848454 .
Ли, Питер. "Proof-Carrying Code" . Архивировано из оригинала 22 сентября 2006 г.
Шапиро, Джонатан (2 апреля 2006 г.). "Различия между койотами и эросами: краткое изложение" . Архивировано из оригинала 2012-07-31.
Шапиро, Джонатан С. (7 апреля 2009 г.). "Status of Coyotos" . coyotos-dev (список рассылки). Архивировано из оригинала 24 июля 2014 г. . Получено 16 марта 2022 г. . " Активная работа над Coyotos прекратилась несколько месяцев назад и вряд ли возобновится. "
Шапиро, Джонатан С.; Вандербург, Джон; Нортап, Эрик; Чизмадиа, Дэвид (2004). Проектирование системы доверенных окон EROS (PDF) . 13-й симпозиум по безопасности USENIX. Сан-Диего, Калифорния, США.
Синха, Аншумал; Сарат, Сандип; Шапиро, Джонатан С. (2004). Перезагрузка сетевых подсистем: высокопроизводительная, защищенная сетевая подсистема (PDF) . Ежегодная техническая конференция USENIX 2004 года. Бостон, Массачусетс, США.
Чэнь, Хао; Шапиро, Джонатан С. «Использование встроенной в сборку статической проверки для сохранения инвариантов корректности» (PDF) . Архивировано из оригинала (PDF) 3 марта 2016 г.
Шапиро, Джонатан С. (2003). Уязвимости в синхронных проектах IPC (PDF) . Симпозиум по безопасности и конфиденциальности 2003 года. Беркли, Калифорния, США. doi : 10.1109/SECPRI.2003.1199341 .

    Чакраборти, Пинаки (2010). «Операционные системы исследовательского назначения – широкий обзор». GESJ: Computer Science and Telecommunications . 3 (26). ISSN   1512-1232 .

Журналы

    Lipton, RJ; Snyder, L. (июль 1977 г.). "Линейный алгоритм времени для принятия решения о безопасности субъекта" . Журнал ACM . 24 (3): 455– 464. doi : 10.1145/322017.322025 . S2CID   291367 .
    Харрисон, Майкл А.; Руццо, В. Л.; Ульман, Джеффри Д. (август 1976 г.). «Защита в операционных системах» . Сообщения ACM . 19 (8): 461– 471. doi : 10.1145/360303.360333 . S2CID   5900205 .

Внешние ссылки

    Домашняя страница EROS на Wayback Machine (архивировано 4 марта 2016 г.)
